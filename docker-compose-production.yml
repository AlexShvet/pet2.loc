version: "3.9"
services:
    cron:
        image: crazymax/swarm-cronjob:latest
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        environment:
            LOG_LEVEL: info
        deploy:
            placement:
                constraints: [node.role == manager]

    traefik:
        image: traefik:2.9
        command:
            --providers.docker=true
            --providers.docker.watch=true
            --providers.docker.swarmMode=true
            --providers.docker.exposedByDefault=false
            --entryPoints.http.address=:80
            --entryPoints.https.address=:443
            --certificatesresolvers.letsEncrypt.acme.httpChallenge=true
            --certificatesresolvers.letsEncrypt.acme.httpChallenge.entryPoint=http
            --certificatesresolvers.letsEncrypt.acme.email=hermansochi@ya.ru
            --certificatesresolvers.letsEncrypt.acme.storage=/certs/acme.json
        ports:
            - target: 80
              published: 80
              protocol: tcp
              mode: host
            - target: 443
              published: 443
              protocol: tcp
              mode: host
        networks:
            - traefik-public
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - traefik-public-certs:/certs
        deploy:
            labels:
                - traefik.enable=true
                - traefik.docker.network=traefik-public

                - traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)
                - traefik.http.routers.http-catchall.entryPoints=http
                - traefik.http.routers.http-catchall.middlewares=redirect-to-https
                - traefik.http.services.http-catchall.loadBalancer.server.port=80

                - traefik.http.middlewares.redirect-to-https.redirectScheme.scheme=https
                - traefik.http.middlewares.redirect-to-https.redirectScheme.permanent=true

                - traefik.http.middlewares.secure-headers.headers.sslRedirect=true
                - traefik.http.middlewares.secure-headers.headers.stsSeconds=31536000
                - traefik.http.middlewares.secure-headers.headers.contentSecurityPolicy=block-all-mixed-content
            placement:
                constraints: [ node.role == manager ]

    frontend:
        image: ${REGISTRY}/frontend:${IMAGE_TAG}
        environment:
            REACT_APP_AUTH_URL: https://api.herman.team
        networks:
            - traefik-public
            - default
        deploy:
            labels:
                - traefik.enable=true
                - traefik.docker.network=traefik-public
                - traefik.http.routers.frontend.rule=Host(`herman.team`) || Host(`www.herman.team`)
                - traefik.http.services.frontend.loadBalancer.server.port=80
                - traefik.http.middlewares.frontend-redirect.redirectRegex.regex=^(https?://)www.herman.team/(.*)$$
                - traefik.http.middlewares.frontend-redirect.redirectRegex.replacement=$${1}herman.team/$${2}
                - traefik.http.middlewares.frontend-redirect.redirectRegex.permanent=true
                - traefik.http.routers.frontend.middlewares=frontend-redirect,secure-headers
                - traefik.http.routers.frontend.entryPoints=https
                - traefik.http.routers.frontend.tls=true
                - traefik.http.routers.frontend.tls.certResolver=letsEncrypt
            mode: replicated
            replicas: 1
            update_config:
                parallelism: 1
                delay: 10s
            placement:
                constraints: [node.role == manager]

    react:
        image: ${REGISTRY}/pet-react:${IMAGE_TAG}
        environment:
            REACT_APP_AUTH_URL: https://api.herman.team
        networks:
            - traefik-public
            - default
        deploy:
            labels:
                - traefik.enable=true
                - traefik.docker.network=traefik-public
                - traefik.http.routers.react.rule=Host(`react.herman.team`) || Host(`www.react.herman.team`)
                - traefik.http.services.react.loadBalancer.server.port=80
                - traefik.http.middlewares.react-redirect.redirectRegex.regex=^(https?://)www.react.herman.team/(.*)$$
                - traefik.http.middlewares.react-redirect.redirectRegex.replacement=$${1}react.herman.team/$${2}
                - traefik.http.middlewares.react-redirect.redirectRegex.permanent=true
                - traefik.http.routers.react.middlewares=react-redirect,secure-headers
                - traefik.http.routers.react.entrypoints=https
                - traefik.http.routers.react.tls=true
                - traefik.http.routers.react.tls.certResolver=letsEncrypt
            mode: replicated
            replicas: 1
            update_config:
                parallelism: 1
                delay: 10s

    api:
        image: ${REGISTRY}/pet-api:${IMAGE_TAG}
        networks:
            - traefik-public
            - default
        deploy:
            labels:
                - traefik.enable=true
                - traefik.docker.network=traefik-public
                - traefik.http.routers.api.rule=Host(`api.herman.team`)
                - traefik.http.services.api.loadBalancer.server.port=80
                - traefik.http.routers.api.middlewares=secure-headers
                - traefik.http.routers.api.entryPoints=https
                - traefik.http.routers.api.tls=true
                - traefik.http.routers.api.tls.certResolver=letsEncrypt
            mode: replicated
            replicas: 1
            update_config:
                parallelism: 1
                delay: 5s

    api-php-fpm:
        image: ${REGISTRY}/api-php-fpm:${IMAGE_TAG}
        environment:
            APP_ENV: prod
            APP_DEBUG: 0
        deploy:
            mode: replicated
            replicas: 1
            update_config:
                parallelism: 1
                delay: 5s

    api-php_cli:
        image: ${REGISTRY}/api-php-cli:${IMAGE_TAG}
        environment:
            APP_ENV: prod
            APP_DEBUG: 0
        deploy:
            restart_policy:
                condition: on-failure
                delay: 5s
                max_attempts: 5
                window: 120s

    api-postgres:
        image: postgres:13.3-alpine
        environment:
            POSTGRES_USER: app
            POSTGRES_PASSWORD: ${API_DB_PASSWORD}
            POSTGRES_DB: app
        volumes:
            - api-postgres:/var/lib/postgresql/data
        deploy:
            placement:
                constraints: [node.role == manager]
            endpoint_mode: dnsrr

volumes:
    api-postgres:
    traefik-public-certs:

networks:
    traefik-public:
        name: traefik-public